<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <script src="/socket.io/socket.io.js"></script>
        <title>Document</title>
        <style>
            #body{
                width: 100%;
                height: 70vh;
                position: relative;
                background: #8ae4bc;
            }
            #chat {
                position: absolute;
                bottom: 0px;
                display: flex;
                justify-content: space-between;
                width: 100%;
            }
            #chat input {
                width: 80%;
            }
            .my-chat {
                display: flex;
                justify-content: end;
                padding: 2px 0px;
            }
            .my-chat p {
                margin: 0;
                padding: 10px;
                background: yellow;
                border-radius: 10px;
                margin-right: 10px;
            }
            .other-chat {
                display: flex;
                justify-content: start;
                padding: 2px 0px;
            }
            .other-chat p {
                margin: 0;
                padding: 10px;
                background: white;
                border-radius: 10px;
                margin-left: 10px;
            }
            .server-log{
                text-align: center;
                margin: 10px;
            }
            .other-chat-name{
                margin: 10px 0px 5px 13px;
                font-weight: 600;
            }
            a{
                text-decoration: none;
                color:black;
            }
            #rooms{
                display: flex;
                justify-content: space-evenly;
            }
        </style>
    </head>
    <body>
        <div id="main">
            <form id="room">
                <input type="text" id="roomName" placeholder="채팅방 만들기" />
                <input type="text" id="userName" placeholder="사용자 이름 입력"/>
                <button>만들기</button>
            </form>
            <ul id="lists"></ul>
        </div>
        <div id="body" hidden>
            <div id="rooms"></div>
            <div id="msg"></div>
            <form id="chat">
                <select id="userList"></select>
                <input type="text" id="message" placeholder="메세지 입력" />
                <button>입력</button>
            </form>
        </div>

        <script>
            const socket = io();
            const roomForm = document.querySelector("#room");
            const chatForm = document.querySelector("#chat");
            const msg = document.querySelector("#msg");


            let myNam;

            //룸리스트
            socket.on("roomList", (roomLists) => {
                const lists = document.querySelector("#lists");
                const rooms = document.querySelector('#rooms');
                lists.textContent = "";
                rooms.textContent = '';
                roomLists.forEach((roomList) => {
                    const li = document.createElement("li");
                    li.textContent = `${roomList} 와 닉네임 입력 후 입장`;
                    const roomName = roomForm.querySelector("#roomName");
                    li.addEventListener('click',()=>{roomName.value=roomList});
                    lists.appendChild(li);
                    const span = document.createElement('span');
                    const a = document.createElement('a');
                    a.href=`/${roomList}`
                    a.textContent=`${roomList}`
                    span.appendChild(a);
                    rooms.appendChild(span);
                });
            });

            //사용자 리스트
            socket.on("userList", (userLists) => {
                const lists = document.querySelector("#userList");
                lists.textContent = "";
                let options = `<option value="all">전체</option>`;
                for (let key in userLists) {
                    options += `<option value="${key}">${userLists[key]}</option>`;
                }
                lists.innerHTML = options;
            });
            //메세지 띄우기
            socket.on("newMessage", (message,nick,secret) => {
                const div = document.createElement("div");
                const p = document.createElement('p');
                p.textContent = message;
                if(myNam === nick){
                    div.appendChild(p);
                    div.classList.add('my-chat');
                } else {
                    if (secret){
                        console.log("secret",message,nick,secret);
                        p.style.backgroundColor='aqua';
                    }
                    const name_div=document.createElement('div');
                    const br = document.createElement('br');
                    name_div.textContent=nick;
                    name_div.classList.add('other-chat-name');
                    msg.appendChild(name_div);
                    div.appendChild(p);
                    div.classList.add('other-chat');
                }
                msg.appendChild(div);
            });

            socket.on('newMember',(arg)=>{
                const div = document.createElement('div');
                div.classList.add('server-log');
                if(arg.id === socket.id){
                    div.textContent=`${arg.roomName}방에 입장하셨습니다`;
                    msg.appendChild(div);
                    return;
                }
                div.textContent=`${arg.userName} (${arg.id}) 님이 입장하셨습니다`;
                msg.appendChild(div);
            })

            ///폼 이벤트
            roomForm.addEventListener("submit", (e) => {
                e.preventDefault();
                const roomName = roomForm.querySelector("#roomName");
                const userName = roomForm.querySelector("#userName");
                if (roomName.value === "" || userName.value === "") {
                    alert("방이름과 닉네임 적어주세요");
                    return;
                }
                socket.emit("create", roomName.value, userName.value, () => {
                    const main = document.querySelector("#main");
                    const body = document.querySelector("#body");
                    main.hidden = true;
                    body.hidden = false;
                    myNam = userName.value;
                });
            });
            chatForm.addEventListener("submit", (e) => {
                e.preventDefault();
                const userList = document.querySelector("#userList");
                const message = document.querySelector("#message");
                console.log('user to',lists);
                const msg = {
                    userList: userList.value,
                    message: message.value,
                };
                socket.emit("sendMessage", msg);
            });
        </script>
    </body>
</html>
